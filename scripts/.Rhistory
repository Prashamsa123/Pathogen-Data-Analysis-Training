head(microbio_df, n=8) # view top 8 rows
head(microbio_df, n=8) # view top 8 rows
View(microbio_df)
View(microbio_df)
First we will clean the microbial results data by extracting the household id and sample type from the sample id, and calculating soil moisture content.
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce")
``{r clean.micro}
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
library(tidyverse)
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
microbio_clean <- microbio_df %>%
dplyr:: mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
# Install packages
install.packages(c("here","tidyverse","dplyr","readxl"))
install.packages(c("here", "tidyverse", "dplyr", "readxl"))
install.packages("Rtools")
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","readxl"))
install.packages("remotes")                        # if not already installed
install.packages(c("here", "tidyverse", "dplyr", "readxl"))
remotes::install_github("jknappe/quantitray")      # installs the package directly from GitHub
# Load libraries
library(here)
library(tidyverse)
library(tidyverse)
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
# Code provided to check structure
names(microbio_df) # variable names
summary(microbio_df) # summary of data
head(microbio_df, n=8) # view top 8 rows
unique(microbio_df$sample_id) %>% length() # number of samples
table(microbio_df$sample_type) # number of rows in dataset by type
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
library(dplyr)
install.packages(c("here","tidyverse","dplyr","readxl"))
install.packages(c("here", "tidyverse", "dplyr", "readxl"))
install.packages("remotes")                        # if not already installed
remotes::install_github("jknappe/quantitray")
library(here)
library(tidyverse)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","readxl"))
install.packages("remotes")                        # if not already installed
remotes::install_github("jknappe/quantitray")      # installs the package directly from GitHub
remove.packages("rlang")
install.packages("rlang")
# Load libraries
library(here)
library(tidyverse)
library(tidyverse)
install.packages(c("evaluate", "gapminder"))
library(here)
library(tidyverse)
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
install.packages(c("here","tidyverse","dplyr","readxl"))
install.packages("remotes")                        # if not already installed
install.packages(c("here", "tidyverse", "dplyr", "readxl"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","readxl"))
#install.packages("remotes")                        # if not already installed
#remotes::install_github("jknappe/quantitray")      # installs the package directly from GitHub
remove.packages("rlang")
install.packages("rlang")
# Load libraries
library(here)
library(tidyverse)
install.packages("stringi")
library(stringi)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
#install.packages(c("here","tidyverse","dplyr","readxl"))
#install.packages("remotes")                        # if not already installed
#remotes::install_github("jknappe/quantitray")      # installs the package directly from GitHub
#remove.packages("rlang")
#install.packages("rlang")
#install.packages("stringi")
# Load libraries
library(here)
library(stringi)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check current directory & set new directory if needed
here()
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
# Code provided to check structure
names(microbio_df) # variable names
summary(microbio_df) # summary of data
head(microbio_df, n=8) # view top 8 rows
unique(microbio_df$sample_id) %>% length() # number of samples
table(microbio_df$sample_type) # number of rows in dataset by type
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
library(tidyverse)
library(tidyverse)
library(stringr)
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
# Workshop task: Check your new variables
# Add code here to check soil_moisture (continuous) and sample_type (categorical)
# Workshop task: Add MPN estimates using quantify_mpn()
# Hint: type help("quantify_mpn") in console to get information about how to use the command
microbio_clean <- microbio_clean %>%
mutate(
# Add total coliform and E. coli MPN estimation (with 95% confidence limits) code here
tc_mpn =
tc_mpn_lo =
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
# Workshop task: Check your new variables
# Add code here to check soil_moisture (continuous) and sample_type (categorical)
knitr::opts_chunk$set(echo = TRUE)
# Install packages
# install.packages(c("here","tidyverse","dplyr","readxl"))
# install.packages("remotes")                        # if not already installed
# remotes::install_github("jknappe/quantitray")      # installs the package directly from GitHub
remove.packages("rlang")
install.packages("rlang")
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Check current directory & set new directory if needed
here()
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
install.packages("rlang")
microbio_df <- read_csv(here
tac_folder <- here
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
View(tac_raw)
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Code provided to check structure
names(microbio_df) # variable names
summary(microbio_df) # summary of
head(microbio_df, n=8) # view top 8 rows
unique(microbio_df$sample_id) %>% length(.) # number of samples
table(microbio_df$sample_type) # number of rows in dataset by type
# Workshop task: Check your new variables
# Add code here to check soil_moisture (continuous) and sample_type (categorical)
summary(microbio_clean$soil_moisture)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
# Workshop task: Check your new variables
# Add code here to check soil_moisture (continuous) and sample_type (categorical)
summary(microbio_clean$soil_moisture)
table(microbio_clean$sample_type)
# Workshop task: Add MPN estimates using quantify_mpn()
# Hint: type help("quantify_mpn") in console to get information about how to use the command
microbio_clean_v2 <- microbio_clean %>% #add_v2 to saved dataset
mutate(
# Add total coliform and E. coli MPN estimation (with 95% confidence limits) code here
# Total coliform
tc_mpn = quantify_mpn(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
tc_mpn_lo = quantify_95lo(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
tc_mpn_hi = quantify_95hi(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
ecoli_mpn = quantify_mpn(e_coli_large_cell_count,e_coli_small_cell_count, method = "qt-2000"),
ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count,e_coli_small_cell_count, method = "qt-2000"),
ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count,e_coli_small_cell_count, method = "qt-2000"),
ar_tc_mpn = quantify_mpn(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_tc_mpn_lo = quantify_95lo(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_tc_mpn_hi = quantify_95hi(ar_total_coliform_large_cell_count,ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn = quantify_mpn(ar_e_coli_large_cell_count,ar_e_coli_small_cell_count, method = "qt-2000"),
ar_ecoli_mpn_lo = quantify_95lo(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn_hi = quantify_95hi(ar_e_coli_large_cell_count,ar_e_coli_small_cell_count,
method = "qt-2000"))
View(microbio_clean_v2)
# Check dataset
microbio_clean %>%
select(household_id, sample_type, tc_mpn:ar_ecoli_mpn_hi) %>%
head(10) # view the first 10 rows of the dataframe
# Check dataset
microbio_clean_v2 %>%
select(household_id, sample_type, tc_mpn:ar_ecoli_mpn_hi) %>%
head(10) # view the first 10 rows of the dataframe
microbio_clean<-microbio_clean_v2
select(household_id,sample_type, tc_mpn:ar_tc_mpn_hi) %>%  head()
microbio_clean <- microbio_clean %>%
mutate(
across(everything(), ~replace_na(.x, 0)), # replace NAs with 0s across all variables in dataframe
tc_detect = if_else(tc_mpn > 0, 1, 0), # set detect = 1 if mpn > 0
ar_tc_detect = if_else(ar_tc_mpn > 0, 1, 0),
ec_detect = if_else(ecoli_mpn > 0, 1, 0),
ar_ec_detect = if_else(ar_ecoli_mpn > 0, 1, 0)
)
table(microbio_clean$tc_detect)
# bonus-check variable frequency by sample type
Table(microbio_clean$sample_type,microbio_clean$tc_detect$)
# bonus-check variable frequency by sample type
table(microbio_clean$sample_type,microbio_clean$tc_detect$)
# bonus-check variable frequency by sample type
table(microbio_clean$sample_type, microbio_clean$tc_detect)
hist(microbio_clean$esbl_e_coli_cfu) # check distribution with histogram
log_adjusted_esbl_cfu =
)
microbio_clean2 <- microbio_clean %>%
mutate(
moisture_fraction = soil_moisture / 100,
esbl_e_coli_cfu_adj = if_else(esbl_e_coli_cfu == 0, 0.5, esbl_e_coli_cfu), # set 0s to 1/2 lower limit of detection (1 CFU)
adjusted_esbl_cfu = case_when( # for
sample_type %in% c("effluent", "compost") ~ esbl_e_coli_cfu_adj / (1 - moisture_fraction) / 2,
sample_type == "produce" ~ esbl_e_coli_cfu_adj,
TRUE ~ NA_real_),
# Add code to create new log_adjusted_esbl_cfu variable here
log_adjusted_esbl_cfu =
)
microbio_clean2 <- microbio_clean %>%
mutate(
moisture_fraction = soil_moisture / 100,
esbl_e_coli_cfu_adj = if_else(esbl_e_coli_cfu == 0, 0.5, esbl_e_coli_cfu), # set 0s to 1/2 lower limit of detection (1 CFU)
adjusted_esbl_cfu = case_when( # for
sample_type %in% c("effluent", "compost") ~ esbl_e_coli_cfu_adj / (1 - moisture_fraction) / 2,
sample_type == "produce" ~ esbl_e_coli_cfu_adj,
TRUE ~ NA_real_),
# Add code to create new log_adjusted_esbl_cfu variable here
log_adjusted_esbl_cfu =log10(adjusted_esbl_cfu)
)
# Add code to check distribution of log adjusted esbl cfu variable here
# Hint: use a histogram
hist(microbio_clean2$adjusted_esbl_cfu)
hist(microbio_clean2$log_adjusted_esbl_cf)
hist(microbio_clean2$log_adjusted_esbl_cfu)
hist(microbio_clean2$adjusted_esbl_cfu)
hist(microbio_clean2$log_adjusted_esbl_cfu)
ggplot(microbio_clean2, aes(x = log_adjusted_esbl_cfu, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
ggplot(microbio_clean2, aes(x = esbl_e_coli_cfulog, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*adj$"),~log10(.)+1, .names = "log.. {.coli}"))
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log.. {.coli}"))
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log.. {.col}"))
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log.. {.col}")
)
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log.. {.col}")
)
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log)
microbio_clean2 <- microbio_clean %>%
mutate(
moisture_fraction = soil_moisture / 100,
esbl_e_coli_cfu_adj = if_else(esbl_e_coli_cfu == 0, 0.5, esbl_e_coli_cfu), # set 0s to 1/2 lower limit of detection (1 CFU)
adjusted_esbl_cfu = case_when( # for
sample_type %in% c("effluent", "compost") ~ esbl_e_coli_cfu_adj / (1 - moisture_fraction) / 2,
sample_type == "produce" ~ esbl_e_coli_cfu_adj,
names(microbio_clean2)
names(microbio_clean2)
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log_. {.col}")
)
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log_adjusted_esbl_cfu)
names(microbio_clean2)
View(microbio_clean2)
View(microbio_clean2)
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log_. {.col}")
)
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log)
names(microbio_clean2)
# Workshop task: Create log-transformed MPN variables
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_,*_adj$"),~log10(.) + 1, .names = "log_ {.col}")
)
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log)
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log_adjusted_esbl_cfu)
# further investigate distribution with a histogram by sample type
ggplot(microbio_clean2, aes(x = log_adjusted_esbl_cfu, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
ggplot(microbio_clean2, aes(x = esbl_e_coli_cfulog, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
hist(microbio_clean2$esbl_e_coli_cfu_adj)
hist(microbio_clean2$log_adjusted_esbl_cfu)
names(microbio_clean2)
microbio_clean2$esbl_e_coli_cfu_adj <-
microbio_clean2$esbl_e_coli_cfu_adj + 1
hist(microbio_clean2$log_adjusted_esbl_cfu)
hist(microbio_clean2$esbl_e_coli_cfu_adj)
